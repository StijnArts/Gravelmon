plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm' version "1.9.23"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    modImplementation "com.cobblemon:neoforge:${cobblemon_file}"
    modImplementation "maven.modrinth:midnightlib:YeePowOJ"
    forgeRuntimeLibrary("thedarkcolour:kotlinforforge-neoforge:5.5.0") {
        exclude group: "net.neoforged.fancymodloader", module: "loader"
    }
    modImplementation "maven.modrinth:packet-fixer:${packet_fixer_neoforge_file}"
    modImplementation files("libs/gravels_extended_battles-neoforge-${gravelmon_file}.jar")
    modImplementation("maven.modrinth:cobblemon-mega-showdown:9.5.4-release-neoforge")

    // Compile against only the API artifact
    compileOnly("top.theillusivec4.curios:curios-neoforge:9.2.2+1.21.1:api")

    // Use the full Curios API jar at runtime
    runtimeOnly("top.theillusivec4.curios:curios-neoforge:9.2.2+1.21.1")
}

def replaceProperties = [mod_id          : mod_id,
                         mod_name        : mod_name,
                         mod_version     : mod_version,
                         mod_authors     : mod_authors,
                         mod_description : mod_description,
                         mod_base_package: mod_base_package,
                         minecraft_version: minecraft_version,
                         fabric_version  : fabric_api_version,
                         loader_version  : fabric_loader_version]

processResources {
    inputs.properties replaceProperties

    filesMatching('META-INF/neoforge.mods.toml') {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
tasks.withType(Jar).configureEach {
    zip64 = true
}

tasks.withType(Zip).configureEach {
    zip64 = true
}