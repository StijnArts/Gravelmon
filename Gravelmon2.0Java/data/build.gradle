plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm' version "1.9.23"
}

repositories {
    mavenCentral()
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=gravelmon"

            runDir "build/datagen"
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation "com.cobblemon:fabric:${cobblemon_file}"
    modImplementation "maven.modrinth:midnightlib:Ct1rAic5"
    modImplementation "maven.modrinth:packet-fixer:${packet_fixer_fabric_file}"
    modImplementation files("libs/gravels_extended_battles-fabric-${gravelmon_file}.jar")
    modImplementation("net.fabricmc:fabric-language-kotlin:${fabric_kotlin}")

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
//    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '3.9'

        implementation 'org.apache.poi:poi-ooxml:5.2.3'



    //Mega showdown compat
    modImplementation("maven.modrinth:cobblemon-mega-showdown:${megashowdown}-fabric")

    modImplementation("maven.modrinth:supermartijn642s-config-lib:1.1.8-fabric-mc1.21")

    modImplementation("dev.emi:trinkets:3.10.0")
}

def replaceProperties = [mod_id          : mod_id,
                         mod_name        : mod_name,
                         mod_version     : mod_version,
                         mod_authors     : mod_authors,
                         mod_description : mod_description,
                         mod_base_package: mod_base_package,
                         minecraft_version: minecraft_version,
                         fabric_version  : fabric_api_version,
                         fabric_loader_version  : fabric_loader_version]

processResources {
    inputs.properties replaceProperties

    filesMatching('fabric.mod.json') {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
    setProperty("zip64", true)
}
tasks.withType(Jar).configureEach {
    zip64 = true
}

tasks.withType(Zip).configureEach {
    zip64 = true
}

remapJar {
    input.set shadowJar.archiveFile
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

